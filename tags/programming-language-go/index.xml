<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming Language - GO on Posts</title>
    <link>https://goodbsw.github.io/tags/programming-language-go/</link>
    <description>Recent content in Programming Language - GO on Posts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>goodbsw@gmail.com (Heungkyu)</managingEditor>
    <webMaster>goodbsw@gmail.com (Heungkyu)</webMaster>
    <lastBuildDate>Thu, 09 Apr 2020 13:19:05 +0900</lastBuildDate>
    
	<atom:link href="https://goodbsw.github.io/tags/programming-language-go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Binary_search</title>
      <link>https://goodbsw.github.io/programming/binary_search/</link>
      <pubDate>Thu, 09 Apr 2020 13:19:05 +0900</pubDate>
      <author>goodbsw@gmail.com (Heungkyu)</author>
      <guid>https://goodbsw.github.io/programming/binary_search/</guid>
      <description>1. Code func BinarySearch(array []int, target int) int { return helper(array, target, 0, len(array)-1) } func helper(array []int, target, left, right int) int { if left &amp;gt; right { return -1 } middle := (left + right) / 2 potentialMatch := array[middle] if target == potentialMatch { return middle } else if target &amp;gt; potentialMatch { return helper(array, target, middle+1, right) } return helper(array, target, left, middle-1) } 2. Conceptual Overview Time Complexity: O(log(n))  Time complexity of using binary search algorithms is O(log(n)) because we traverse the half of the array when the target isn&amp;rsquo;t found at the given half.</description>
    </item>
    
    <item>
      <title>Product_sum</title>
      <link>https://goodbsw.github.io/programming/product_sum/</link>
      <pubDate>Tue, 07 Apr 2020 17:11:31 +0900</pubDate>
      <author>goodbsw@gmail.com (Heungkyu)</author>
      <guid>https://goodbsw.github.io/programming/product_sum/</guid>
      <description>1. Code type SpecialArray []interface{} func ProductSum(array []interface{}) int { return helper(array, 1) } func helper(array SpecialArray, multiplier int) int { sum := 0 for _, el := range array { if cast, ok := el.(SpecialArray); ok { sum += helper(cast, multiplier+1) } else if cast, ok := el.(int); ok { sum += cast } } return counter * sum } 2. Conceptual Overview Time Complexity: O(n)  It is really important to specify what n is.</description>
    </item>
    
    <item>
      <title>Fibonacci</title>
      <link>https://goodbsw.github.io/programming/fibonacci/</link>
      <pubDate>Mon, 06 Apr 2020 13:01:13 +0900</pubDate>
      <author>goodbsw@gmail.com (Heungkyu)</author>
      <guid>https://goodbsw.github.io/programming/fibonacci/</guid>
      <description>1. Code Codes are seperated into 3 parts according to Big-O notation for this time.
  O(2^n) time complexity | O(n) space complexity func GetNthFib(n int) int { if n == 1 { return 0 } else if n == 2 { return 1 } return GetNthFib(n-1) + GetNthFib(n-2) }   This approach is very typical and the easiest way of solving fibonacci algorithms. Combination of typical and easiest means not effective by the way.</description>
    </item>
    
    <item>
      <title>Linkedlist</title>
      <link>https://goodbsw.github.io/programming/linkedlist/</link>
      <pubDate>Thu, 02 Apr 2020 20:58:48 +0900</pubDate>
      <author>goodbsw@gmail.com (Heungkyu)</author>
      <guid>https://goodbsw.github.io/programming/linkedlist/</guid>
      <description>1. Code package main type Node struct { value int next, prev *Node } type DoublyLinkedList struct { head, tail *Node } func NewDoublyLinkedList() { return &amp;amp;DoublyLinkedList{} } // O(1) time complexity | O(1) space complexity func (ll *DoublyLinkedList) setHead(node *Node) { if ll.head == nil { ll.head = node ll.tail = node return } ll.insertBefore(ll.head, node) } // O(1) time complexity | O(1) space complexity func (ll *DoublyLinkedList) setTail(node *Node) { if ll.</description>
    </item>
    
    <item>
      <title>Depth First Search</title>
      <link>https://goodbsw.github.io/programming/first_post/</link>
      <pubDate>Tue, 31 Mar 2020 15:05:50 +0900</pubDate>
      <author>goodbsw@gmail.com (Heungkyu)</author>
      <guid>https://goodbsw.github.io/programming/first_post/</guid>
      <description>1. Code type Node { Name string Children []*Node } func (n *Node) DepthFirstSearch(array []string) []string { array = append(array, n.Name) for _, child := range n.Children { array = child.DepthFirstSearch(array) } return array } 2. Time and Space Complexity  Time Complexity: O(V+E) Where V is the number of nodes and E is line connecting between nodes Space Complexity: O(V) Where V is the number of nodes  3. Thing I Learned Today  Almost get how recursive function works  </description>
    </item>
    
  </channel>
</rss>