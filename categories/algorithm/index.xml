<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on Posts</title>
    <link>https://goodbsw.github.io/categories/algorithm/</link>
    <description>Recent content in algorithm on Posts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>goodbsw@gmail.com (Heungkyu)</managingEditor>
    <webMaster>goodbsw@gmail.com (Heungkyu)</webMaster>
    <lastBuildDate>Tue, 07 Apr 2020 17:11:31 +0900</lastBuildDate>
    
	<atom:link href="https://goodbsw.github.io/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Product_sum</title>
      <link>https://goodbsw.github.io/programming/product_sum/</link>
      <pubDate>Tue, 07 Apr 2020 17:11:31 +0900</pubDate>
      <author>goodbsw@gmail.com (Heungkyu)</author>
      <guid>https://goodbsw.github.io/programming/product_sum/</guid>
      <description>1. Code type SpecialArray []interface{} func ProductSum(array []interface{}) int { return helper(array, 1) } func helper(array SpecialArray, multiplier int) int { sum := 0 for _, el := range array { if cast, ok := el.(SpecialArray); ok { sum += helper(cast, multiplier+1) } else if cast, ok := el.(int); ok { sum += cast } } return counter * sum } 2. Conceptual Overview Time Complexity: O(n)  It is really important to specify what n is.</description>
    </item>
    
    <item>
      <title>Linkedlist</title>
      <link>https://goodbsw.github.io/programming/linkedlist/</link>
      <pubDate>Thu, 02 Apr 2020 20:58:48 +0900</pubDate>
      <author>goodbsw@gmail.com (Heungkyu)</author>
      <guid>https://goodbsw.github.io/programming/linkedlist/</guid>
      <description>1. Code package main type Node struct { value int next, prev *Node } type DoublyLinkedList struct { head, tail *Node } func NewDoublyLinkedList() { return &amp;amp;DoublyLinkedList{} } // O(1) time complexity | O(1) space complexity func (ll *DoublyLinkedList) setHead(node *Node) { if ll.head == nil { ll.head = node ll.tail = node return } ll.insertBefore(ll.head, node) } // O(1) time complexity | O(1) space complexity func (ll *DoublyLinkedList) setTail(node *Node) { if ll.</description>
    </item>
    
  </channel>
</rss>